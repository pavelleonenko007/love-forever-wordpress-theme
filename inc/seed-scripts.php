<?php
/**
 * Seed —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ WP-CLI:
 * wp eval-file wp-content/themes/loveforever/inc/seed-scripts.php apply_auto_rules
 * wp eval-file wp-content/themes/loveforever/inc/seed-scripts.php apply_price_rules
 * wp eval-file wp-content/themes/loveforever/inc/seed-scripts.php apply_all_rules
 */

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ WP-CLI
if ( ! defined( 'WP_CLI' ) || ! WP_CLI ) {
	wp_die( '–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ WP-CLI' );
}

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
$args = $argv;
$script_name = isset( $args[1] ) ? $args[1] : '';

switch ( $script_name ) {
	case 'apply_auto_rules':
		apply_auto_rules_to_all_dresses();
		break;
	case 'apply_price_rules':
		apply_price_rules_to_all_dresses();
		break;
	case 'apply_all_rules':
		apply_all_rules_to_all_dresses();
		break;
	default:
		WP_CLI::error( '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: apply_auto_rules, apply_price_rules, apply_all_rules' );
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ –≤—Å–µ–º –ø–ª–∞—Ç—å—è–º
 */
function apply_auto_rules_to_all_dresses() {
	WP_CLI::log( 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ –≤—Å–µ–º –ø–ª–∞—Ç—å—è–º...' );
	
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç—å—è
	$dresses = get_posts( array(
		'post_type'      => 'dress',
		'numberposts'    => -1,
		'post_status'    => 'publish',
		'fields'         => 'ids',
	) );
	
	if ( empty( $dresses ) ) {
		WP_CLI::warning( '–ü–ª–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.' );
		return;
	}
	
	WP_CLI::log( sprintf( 'üìã –ù–∞–π–¥–µ–Ω–æ %d –ø–ª–∞—Ç—å–µ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.', count( $dresses ) ) );
	
	$processed = 0;
	$updated = 0;
	
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	$progress = \WP_CLI\Utils\make_progress_bar( '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏', count( $dresses ) );
	
	foreach ( $dresses as $dress_id ) {
		$progress->tick();
		
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		$current_categories = get_field( 'dress_category', $dress_id );
		$current_categories = is_array( $current_categories ) ? $current_categories : array();
		
		// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
		$new_categories = apply_auto_rules_to_single_dress( $dress_id, $current_categories );
		
		// –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º
		if ( $new_categories !== $current_categories ) {
			update_field( 'dress_category', $new_categories, $dress_id );
			wp_set_post_terms( $dress_id, $new_categories, 'dress_category' );
			$updated++;
		}
		
		$processed++;
	}
	
	$progress->finish();
	
	WP_CLI::success( sprintf( 
		'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –ø–ª–∞—Ç—å–µ–≤. –û–±–Ω–æ–≤–ª–µ–Ω–æ: %d –ø–ª–∞—Ç—å–µ–≤.', 
		$processed, 
		$updated 
	) );
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ –≤—Å–µ–º –ø–ª–∞—Ç—å—è–º
 */
function apply_price_rules_to_all_dresses() {
	WP_CLI::log( 'üí∞ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª –∫–æ –≤—Å–µ–º –ø–ª–∞—Ç—å—è–º...' );
	
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç—å—è
	$dresses = get_posts( array(
		'post_type'      => 'dress',
		'numberposts'    => -1,
		'post_status'    => 'publish',
		'fields'         => 'ids',
	) );
	
	if ( empty( $dresses ) ) {
		WP_CLI::warning( '–ü–ª–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.' );
		return;
	}
	
	WP_CLI::log( sprintf( 'üìã –ù–∞–π–¥–µ–Ω–æ %d –ø–ª–∞—Ç—å–µ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.', count( $dresses ) ) );
	
	$processed = 0;
	$updated = 0;
	
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	$progress = \WP_CLI\Utils\make_progress_bar( '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª', count( $dresses ) );
	
	foreach ( $dresses as $dress_id ) {
		$progress->tick();
		
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		$current_categories = get_field( 'dress_category', $dress_id );
		$current_categories = is_array( $current_categories ) ? $current_categories : array();
		
		// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
		$new_categories = apply_price_rules_to_single_dress( $dress_id, $current_categories );
		
		// –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º
		if ( $new_categories !== $current_categories ) {
			update_field( 'dress_category', $new_categories, $dress_id );
			wp_set_post_terms( $dress_id, $new_categories, 'dress_category' );
			$updated++;
		}
		
		$processed++;
	}
	
	$progress->finish();
	
	WP_CLI::success( sprintf( 
		'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –ø–ª–∞—Ç—å–µ–≤. –û–±–Ω–æ–≤–ª–µ–Ω–æ: %d –ø–ª–∞—Ç—å–µ–≤.', 
		$processed, 
		$updated 
	) );
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ –≤—Å–µ–º –ø–ª–∞—Ç—å—è–º
 */
function apply_all_rules_to_all_dresses() {
	WP_CLI::log( 'üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª –∫–æ –≤—Å–µ–º –ø–ª–∞—Ç—å—è–º...' );
	
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç—å—è
	$dresses = get_posts( array(
		'post_type'      => 'dress',
		'numberposts'    => -1,
		'post_status'    => 'publish',
		'fields'         => 'ids',
	) );
	
	if ( empty( $dresses ) ) {
		WP_CLI::warning( '–ü–ª–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.' );
		return;
	}
	
	WP_CLI::log( sprintf( 'üìã –ù–∞–π–¥–µ–Ω–æ %d –ø–ª–∞—Ç—å–µ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.', count( $dresses ) ) );
	
	$processed = 0;
	$updated = 0;
	
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	$progress = \WP_CLI\Utils\make_progress_bar( '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª', count( $dresses ) );
	
	foreach ( $dresses as $dress_id ) {
		$progress->tick();
		
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		$current_categories = get_field( 'dress_category', $dress_id );
		$current_categories = is_array( $current_categories ) ? $current_categories : array();
		
		// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
		$new_categories = apply_auto_rules_to_single_dress( $dress_id, $current_categories );
		
		// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
		$new_categories = apply_price_rules_to_single_dress( $dress_id, $new_categories );
		
		// –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º
		if ( $new_categories !== $current_categories ) {
			update_field( 'dress_category', $new_categories, $dress_id );
			wp_set_post_terms( $dress_id, $new_categories, 'dress_category' );
			$updated++;
		}
		
		$processed++;
	}
	
	$progress->finish();
	
	WP_CLI::success( sprintf( 
		'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –ø–ª–∞—Ç—å–µ–≤. –û–±–Ω–æ–≤–ª–µ–Ω–æ: %d –ø–ª–∞—Ç—å–µ–≤.', 
		$processed, 
		$updated 
	) );
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫ –æ–¥–Ω–æ–º—É –ø–ª–∞—Ç—å—é
 * 
 * @param int   $dress_id ID –ø–ª–∞—Ç—å—è
 * @param array $current_categories –¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @return array –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function apply_auto_rules_to_single_dress( $dress_id, $current_categories ) {
	$dress_categories = $current_categories;

	if ( empty( $dress_categories ) ) {
		return $current_categories;
	}

	$dress_categories_objects  = array_map( 'get_term', $dress_categories );
	$parent_dress_categories   = array_filter( $dress_categories_objects, fn( $cat ) => 0 === $cat->parent );
	$parent_dress_category_ids = array_map( fn( $cat ) => $cat->term_id, $parent_dress_categories );

	if ( empty( $parent_dress_category_ids ) ) {
		return $current_categories;
	}

	$filters = array(
		'brand'      => get_field( 'brand', $dress_id ),
		'style'      => get_field( 'style', $dress_id ),
		'silhouette' => get_field( 'silhouette', $dress_id ),
		'color'      => get_field( 'color', $dress_id ),
		'fabric'     => get_field( 'fabric', $dress_id ),
		'badge'      => get_field( 'badge', $dress_id ),
	);

	if ( empty( array_filter( array_values( $filters ) ) ) ) {
		return $current_categories;
	}

	$rules = get_posts( array(
		'post_type'   => 'auto_rule',
		'numberposts' => -1,
		'post_status' => 'publish',
	) );

	$matched_terms = array();

	foreach ( $rules as $rule ) {
		$base_category_id   = get_field( 'base_dress_category', $rule->ID );
		$result_category_id = get_field( 'result_dress_category', $rule->ID );
		$rule_filters       = get_field( 'filters', $rule->ID );

		if ( ! $base_category_id || ! $result_category_id ) {
			continue;
		}

		if ( ! in_array( $base_category_id, $parent_dress_category_ids, true ) ) {
			continue;
		}

		$matched = false;

		foreach ( $rule_filters as $taxonomy => $rule_terms ) {
			if ( empty( $rule_terms ) || empty( $filters[ $taxonomy ] ) ) {
				continue;
			}

			// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—è badge (–Ω–µ —Ç–∞–∫—Å–æ–Ω–æ–º–∏—è)
			if ( 'badge' === $taxonomy ) {
				if ( $filters[ $taxonomy ] === $rule_terms ) {
					$matched = true;
				} else {
					$matched = false;
					break;
				}
			} else {
				// –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–∞–∫—Å–æ–Ω–æ–º–∏–π
				$common = array_intersect( $filters[ $taxonomy ], $rule_terms );

				if ( empty( $common ) ) {
					$matched = false;
					break;
				}

				$matched = true;
			}
		}

		if ( $matched ) {
			$matched_terms[] = $result_category_id;
		}
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	if ( ! empty( $matched_terms ) ) {
		return array_unique( array_merge( $dress_categories, $matched_terms ) );
	}

	return $current_categories;
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∫ –æ–¥–Ω–æ–º—É –ø–ª–∞—Ç—å—é
 * 
 * @param int   $dress_id ID –ø–ª–∞—Ç—å—è
 * @param array $current_categories –¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @return array –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function apply_price_rules_to_single_dress( $dress_id, $current_categories ) {
	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–ª–∞—Ç—å—è
	$final_price = get_field( 'final_price', $dress_id );
	
	if ( empty( $final_price ) || ! is_numeric( $final_price ) ) {
		return $current_categories;
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
	$price_rules = get_posts( array(
		'post_type'   => 'price_rule',
		'numberposts' => -1,
		'post_status' => 'publish',
	) );

	$matched_categories = array();

	foreach ( $price_rules as $rule ) {
		$min_price = get_field( 'min_price', $rule->ID );
		$max_price = get_field( 'max_price', $rule->ID );
		$target_category = get_field( 'target_category', $rule->ID );

		if ( empty( $target_category ) ) {
			continue;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—É
		$matches = false;

		if ( ! empty( $min_price ) && ! empty( $max_price ) ) {
			// –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
			$matches = ( $final_price >= $min_price && $final_price <= $max_price );
		} elseif ( ! empty( $min_price ) ) {
			// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
			$matches = ( $final_price >= $min_price );
		} elseif ( ! empty( $max_price ) ) {
			// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
			$matches = ( $final_price <= $max_price );
		}

		if ( $matches ) {
			$matched_categories[] = $target_category;
		}
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	if ( ! empty( $matched_categories ) ) {
		return array_unique( array_merge( $current_categories, $matched_categories ) );
	}

	return $current_categories;
}
